{
    "componentChunkName": "component---src-templates-blog-post-jsx",
    "path": "/blog/send-large-files-from-frontend-to-the-backend",
    "result": {"data":{"markdownRemark":{"html":"<p>Recently, in one of my frontend interviews,</p>\n<p><strong>Interviewer</strong> — Suppose we are giving the user option to upload a file and save it. Then how will you send the file to the backend?\n<strong>Me</strong> — We can directly send it in the body of a POST API call.</p>\n<p><strong>Interviewer</strong> — What if it is a large file? suppose, of 2GB.\n<strong>Me</strong> — uhh! Maybe we can compress the file and then can split it into parts and then can send the parts one by one.</p>\n<p><strong>Interviewer</strong> — But how will you do it?\n<strong>Me</strong> — I am not really sure. I haven’t experienced any problem like this so far.</p>\n<h2 id=\"one-way-of-doing-it\" style=\"position:relative;\"><a href=\"#one-way-of-doing-it\" aria-label=\"one way of doing it permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One way of doing it</h2>\n<p>In javascript, we have something called FileReader. What we can do is, we can create a FileReader object and then we can read the uploaded file as an array buffer.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fileReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfileReader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsArrayBuffer</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// file.files[0] shows the uploaded file</span></code></pre></div>\n<p>After this, we can use the - <code class=\"language-text\">onload</code> method of the file reader object, which is triggered once the file reading is completed.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fileReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfileReader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsArrayBuffer</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// file.files[0] shows the uploaded file</span>\nfileReader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>The event parameter stored the content of the file as an array buffer in the</p>\n<ul>\n<li><code class=\"language-text\">event.target.result</code> field. So, using this, we can split the content into small chunks and then can send those chunks to the backend (basically, we will stream the chunks).</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">fileReader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">const</span> <span class=\"token constant\">CHUNK_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">const</span> totalChunks <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span>byteLength <span class=\"token operator\">/</span> <span class=\"token constant\">CHUNK_SIZE</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// generate a file name</span>\n   <span class=\"token keyword\">const</span> fileName <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> file<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> chunk <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> chunk <span class=\"token operator\">&lt;</span> totalChunks <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> chunk<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">let</span> <span class=\"token constant\">CHUNK</span> <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>chunk <span class=\"token constant\">CHUNK_SIZE</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>chunk <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">CHUNK_SIZE</span><span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/upload?fileName='</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token string-property property\">'method'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string-property property\">'headers'</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token string-property property\">'content-type'</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"application/octet-stream\"</span><span class=\"token punctuation\">,</span>\n               <span class=\"token string-property property\">'content-length'</span> <span class=\"token operator\">:</span> <span class=\"token constant\">CHUNK</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string-property property\">'body'</span><span class=\"token operator\">:</span> <span class=\"token constant\">CHUNK</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you see, we have added the file name as a query parameter, and you might wonder why we are sending the file name as well. See, all the API calls to the backend server are stateless, which means API does not remember the last call it received, and we are streaming data, so to append the content to a file, we need to have a unique identifier, which would be the file name for our case.</p>\n<p>And because the user might want to upload the file with the same file name to make sure the backend does work as expected, we need a unique identifier. For that, we use this beautiful one-liner:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">leMath<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ideally, we should not send any custom header because most of the proxies such as Nginx or HAProxy might block it.</p>\n<h2 id=\"now-on-the-backend\" style=\"position:relative;\"><a href=\"#now-on-the-backend\" aria-label=\"now on the backend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Now on the backend</h2>\n<p>We can do something like</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token operator\">===</span> ‘<span class=\"token operator\">/</span>upload’ <span class=\"token operator\">&amp;&amp;</span> req<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> ‘<span class=\"token constant\">POST</span>’<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">const</span> fileName <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>‘<span class=\"token operator\">/</span>upload<span class=\"token operator\">?</span>fileName’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n   req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">chunk</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     fs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFileSync</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// append to a file on the disk</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'successfully file uploaded!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","timeToRead":2,"frontmatter":{"title":"Send large files from frontend to the backend","date":"March 23, 2023","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/static/a1e712381a0641cc8ee79c42912b5fbc/a6312/thumbnail.png","srcSet":"/static/a1e712381a0641cc8ee79c42912b5fbc/e7dcc/thumbnail.png 750w,\n/static/a1e712381a0641cc8ee79c42912b5fbc/50eb2/thumbnail.png 1080w,\n/static/a1e712381a0641cc8ee79c42912b5fbc/a6312/thumbnail.png 1200w","sizes":"100vw"},"sources":[{"srcSet":"/static/a1e712381a0641cc8ee79c42912b5fbc/ee7ce/thumbnail.webp 750w,\n/static/a1e712381a0641cc8ee79c42912b5fbc/819dc/thumbnail.webp 1080w,\n/static/a1e712381a0641cc8ee79c42912b5fbc/f9756/thumbnail.webp 1200w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.5}}}}}},"pageContext":{"slug":"/send-large-files-from-frontend-to-the-backend"}},
    "staticQueryHashes": ["302212780","3241219334","3516861917"]}