{
    "componentChunkName": "component---src-templates-blog-post-jsx",
    "path": "/blog/the-array-methods-coming-to-js-in-2022",
    "result": {"data":{"markdownRemark":{"html":"<p>In previous articles, I’ve covered that Javascript stores objects and arrays in heap storage. That means that an array is created once, and then any updates to it in the future will update that original array. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> newArray <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">;</span>\n\nnewArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Both return [ 2, 2, 3 ]</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">,</span> myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As such, we often find ourselves making copies or cloning arrays to make changes on them without affecting the original. A common way to do that is with <a href=\"https://fjolt.com/article/javascript-three-dots-spread-operator\">the three dots</a> operator:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> newArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>myArray<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nnewArray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Returns [ 2, 2, 3 ] and [ 1, 2, 3 ]</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">,</span> myArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Since cloning is so common, a new specification has been written which has reached stage 3, which will give us a host of new ways to copy and then change an array. This proposal is called the <a href=\"https://github.com/tc39/proposal-change-array-by-copy\">“Change Array by Copy”</a> proposal. Let’s take a look at how it works.</p>\n<h2 id=\"support\" style=\"position:relative;\"><a href=\"#support\" aria-label=\"support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Support</h2>\n<p>Currently, these features are not supported in any major browser or Node.JS version. We can expect them to be supported soon though since this specification has reached Stage 3 in the Javascript proposal process. This section will be updated as support changes.</p>\n<p>Saying that, a <a href=\"https://github.com/tc39/proposal-change-array-by-copy/blob/main/polyfill.js\">polyfill</a> does exists to recreate the behaviour of this proposal, which you can use today.</p>\n<h2 id=\"new-change-array-by-copy-methods\" style=\"position:relative;\"><a href=\"#new-change-array-by-copy-methods\" aria-label=\"new change array by copy methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New Change Array by Copy Methods</h2>\n<p>The new proposal adds 4 new methods which will copy an array, and then change it in some way. These are:</p>\n<ul>\n<li><code class=\"language-text\">Array.prototype.toReversed()</code> - clone an array, and then reverse it</li>\n<li><code class=\"language-text\">Array.prototype.toSorted(compareFn)</code> - clone an array, and then sort it.</li>\n<li><code class=\"language-text\">Array.prototype.toSpliced(start, deleteCount, ...items)</code> - clone an array, and splice it in some way.</li>\n<li><code class=\"language-text\">Array.prototype.with(index, value)</code> - clone an array, and add a new element somewhere within it.</li>\n</ul>\n<p>All of these methods will work on <code class=\"language-text\">TypedArray</code> data too, for example, <code class=\"language-text\">Int8Array</code>.</p>\n<h2 id=\"toreversed\" style=\"position:relative;\"><a href=\"#toreversed\" aria-label=\"toreversed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>toReversed()</h2>\n<p><code class=\"language-text\">toReversed</code> does exactly what it says - it takes an array, and reverses it. Since this function clones the array, we don’t need to do any copying to create a new version of our original array:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">toReversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Returns [ 1, 2, 3 ], [ 3, 2, 1 ]</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"tosorted\" style=\"position:relative;\"><a href=\"#tosorted\" aria-label=\"tosorted permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>toSorted()</h2>\n<p><code class=\"language-text\">toSorted</code>, is a non-destructive version of <code class=\"language-text\">sort()</code>, meaning it does not alter the original array. By default, will take an array and sort it numerically. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">toSorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 1, 2, 3, 4, 5 ]</span></code></pre></div>\n<p>It also accepts a comparison function, which works the same as the sort() method in Javascript, and is useful when working with an array of objects. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// y becomes:</span>\n<span class=\"token comment\">// [</span>\n<span class=\"token comment\">//    { value: 0 },</span>\n<span class=\"token comment\">//    { value: 2 },</span>\n<span class=\"token comment\">//    { value: 3 },</span>\n<span class=\"token comment\">//    { value: 4 }</span>\n<span class=\"token comment\">// ]</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">toSorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>value <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>value\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"tospliced\" style=\"position:relative;\"><a href=\"#tospliced\" aria-label=\"tospliced permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>toSpliced()</h2>\n<p><code class=\"language-text\">toSpliced()</code> is a non-destructive version of <code class=\"language-text\">splice()</code>, meaning it does not alter the original array. It accepts three arguments:</p>\n<ul>\n<li><code class=\"language-text\">start</code> - the position to start at.</li>\n<li><code class=\"language-text\">deleteCount</code> - the number of elements to remove.</li>\n<li><code class=\"language-text\">...items</code> - any items to insert at the start position after deletion.</li>\n</ul>\n<h3 id=\"for-example\" style=\"position:relative;\"><a href=\"#for-example\" aria-label=\"for example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For example:</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Zebra\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tiger\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lion\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// y is [ \"Dog\", \"Snake\", \"Bat\", \"Tiger\", \"Lion\" ]</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">toSpliced</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Snake\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// z is [ \"Dog, \"Tiger\", \"Lion\" ]</span>\n<span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">toSpliced</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em><strong>The above</strong></em> is a perfect example of how these copy functions are useful - using the original <code class=\"language-text\">splice()</code> method, we would remove elements from <code class=\"language-text\">x</code> and permanently change them. Using <code class=\"language-text\">toSpliced()</code>, we can change <code class=\"language-text\">x</code> many times, without worrying about its contents changing.</p>\n<h3 id=\"with\" style=\"position:relative;\"><a href=\"#with\" aria-label=\"with permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>with()</h3>\n<p>Finally, we have <code class=\"language-text\">with()</code>, which simply changes one element in an existing array. In essence, take Array A and show it <code class=\"language-text\">with</code> something else. Here is an example of it in action.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"Dog\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lizard\"</span> <span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// y is now [ \"Dog\", \"Zebra\", \"Lizard\" ]</span>\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Zebra\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// z is now [ \"Tiger\", \"Cat\", \"Lizard\" ]</span>\n<span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tiger\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Again, we’ve been able to make multiple new arrays from one initial array, without having to create a copy each time.</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>These array additions are pretty uncontroversial, and much-needed addition to a language that normally maintains only one copy of an array or object. Using these new methods, Javascript removes confusion and complexity in code. Although not as big of a change as something like <a href=\"https://fjolt.com/article/javascript-temporal\">Temporal</a>, it is still a welcome addition to the language.</p>","timeToRead":4,"frontmatter":{"title":"The Array Methods Coming to JavaScript in 2022","date":"March 08, 2022","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/static/5d92935034c5e243e5d276acdfaa2da6/29ba9/thumbnail.jpg","srcSet":"/static/5d92935034c5e243e5d276acdfaa2da6/7284f/thumbnail.jpg 750w,\n/static/5d92935034c5e243e5d276acdfaa2da6/29ba9/thumbnail.jpg 1080w","sizes":"100vw"},"sources":[{"srcSet":"/static/5d92935034c5e243e5d276acdfaa2da6/57584/thumbnail.webp 750w,\n/static/5d92935034c5e243e5d276acdfaa2da6/984df/thumbnail.webp 1080w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":0.6666666666666666}}}}}},"pageContext":{"slug":"/the-array-methods-coming-to-js-in-2022"}},
    "staticQueryHashes": ["3241219334"]}